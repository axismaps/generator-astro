/**
 * React Boot
 *
 */

const React = require('react');
const { Provider } = require('react-redux');
const { combineReducers, createStore } = require('redux');
const { StaticRouter } = require('react-router-dom');
const { renderToString } = require('react-dom/server');
const App = require('@containers/app');
const reducers = require('@ducks/reducers');

// WARNING: See the following for security issues around embedding JSON in HTML:
// http://redux.js.org/recipes/ServerRendering.html#security-considerations
const renderPage = (html, css, clientJs, preloadedState) => (
  `<!doctype html>
      <html lang="">
      <head>
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta charset="utf-8" />
        <title>Welcome to Astro Generator</title>
        <meta name="viewport" content="width=device-width, initial-scale=1">
      </head>
      <body>
        <div id="root">${html}</div>
        <script>
          window.__PRELOADED_STATE__ = ${JSON.stringify(preloadedState).replace(/</g, '\\u003c')}
        </script>
        ${css}
        ${clientJs}
      </body>
    </html>`
);

const renderReact = async (req, res) => {
  const combinedReducers = combineReducers({
    ...reducers
  });

  const store = createStore(combinedReducers);

  const context = {};
  const markup = renderToString(
    <Provider store={store}>
      <StaticRouter context={context} location={req.url}>
        <App store={store} />
      </StaticRouter>
    </Provider>
  );

  if (context.url) {
    return res.redirect(context.url);
  }
  const { assets: { client } } = req;
  const css = (client && client.css) ? `<link rel="stylesheet" href="${client.css}">` : '';
  const clientJs = process.env.NODE_ENV === 'production' ? `<script src="${client.js}" defer></script>` : `<script src="${client.js}" defer crossorigin></script>`;
  res.status(200);
  return res.send(
    renderPage(markup, css, clientJs, store.getState())
  );
};

module.exports = renderReact;
